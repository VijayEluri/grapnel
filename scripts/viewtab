#!/usr/bin/env groovy 

/*

	BUG	 Empty cells not showing up as empty but as control char
	BUG	 non-type matching headings showing up as some kind of garbage. 

	TODO Add overall descriptive statistics (at least to the plots)
	TODO "Pin" plots so that you can select different rows and plot will update. 
	TODO Run functions on rows... for example BimodalityFilter, and get some kind of output. 
	TODO Move some of this code into a library so that it can get more complex. 
	TODO Add search facility (e.g. search row names for PTEN)
	TODO Set app name to be the name of the file so can switch to it easily
	TODO Set main menu name to be viewtab instead of Groovy 
	^^ These last two will probably require packaging viewtab up as an OS X app, with the
	   viewtab script buried inside resources or some such. 
	   Not sure what the implications are for other platforms. 
*/

import groovy.swing.SwingBuilder
import javax.swing.JTable
import javax.swing.*
import javax.swing.table.AbstractTableModel;
import java.awt.*;
import java.awt.event.*;
import java.awt.BorderLayout as BL
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.TableRowSorter;
import java.text.DecimalFormat;

import org.jfree.chart.*
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.*
import org.jfree.chart.renderer.xy.*;
import org.jfree.data.xy.*;
import org.jfree.ui.*
import org.jfree.data.statistics.*;
import org.jfree.chart.title.*;

import com.google.common.primitives.Doubles;



// Import breaks script on non-OS X machines. 
//import com.apple.eawt.Application;

import grapnel.util.*
import grapnel.os.*
import grapnel.gui.*
import static grapnel.charts.Charts.*

import org.apache.commons.math3.stat.correlation.SpearmansCorrelation
import org.apache.commons.math3.stat.descriptive.DescriptiveStatistics
import org.apache.commons.math3.stat.inference.*

err = System.err

// Enable system specific GUI features...
if (OSSupport.isOSX()){
	OSSupport.setOSXLookAndFeel(this)	
}

options = ParseOptions(args)

// Determine separator to use...
if (options.separator) sep = options.separator
else sep = FileUtils.determineSeparator(options.fileName)

// Regex that properly handles quoted strings with commas inside. 
// slower, but more robust. 
if (options.qregex){
	sep = /,(?=([^\"]|\"[^\"]*\")*$)/
}

// Read the data in as a Table...
def dt
if (options.nonsquare){
	dt = new Table(bFirstColInTable=false)
	dt.readFileNonSquare(options.fileName,sep)
}else{
	dt = new Table(bFirstColInTable=true)
	dt.readFile(options.fileName,sep)
}

// Use that Table to back a JTable instance..
err.print "Creating gui table..."
dtm = new TableModel(dt)

// Create a swingbuilder...
swing = new SwingBuilder()

// define some menus...
def menuItems = {
		menu(text: "Actions", mnemonic: 'F') {
			//menuItem(text: "Save view", mnemonic: 's', actionPerformed: {save()})
			menuItem(text: "Exit", mnemonic: 'X', actionPerformed: { System.exit(0) })
		}
}

// Build the frame...
def thetab,jtf
frame = swing.frame(title:options.fileName,defaultCloseOperation:JFrame.EXIT_ON_CLOSE){
//	frame = swing.frame(title:options.fileName){
	menuBar(menuItems)
		
	borderLayout()
		// Add a scroll pane with table inside...
		scrollpane = scrollPane{						
			thetab = table(autoResizeMode:JTable.AUTO_RESIZE_OFF, 
											autoCreateRowSorter:true,
											cellSelectionEnabled:false,
											columnSelectionAllowed:true,
											preferredScrollableViewportSize:[900,400]){
												tableModel(dtm)										
											}																		
  		}
		def rowSorter = new TableRowSorter(dtm);
		thetab.setRowSorter(rowSorter)	
		
		jtf = textField(id:"jtFilter",constraints:BL.SOUTH,actionPerformed:{
			String text = jtf.getText();

			if (text.trim().length() == 0) {
         		rowSorter.setRowFilter(null);
			} else {
				def filterStr="(?i)" + text
         		rowSorter.setRowFilter(RowFilter.regexFilter(filterStr));
     		}
		 }) // actionPerformed:{println("TextEntered")},
	
}
err.println "done."

// Add a row filter and listener to filter text 
//def rowSorter = new TableRowSorter(thetab.getModel());

// This character by character update is a bit too slow for very large tables
// so just do this as enter action...
// 
//createFilterListener(jtf,rowSorter)


// Set the default selection mode for the table...
thetab.columnSelectionAllowed = false
thetab.rowSelectionAllowed = true
bRowSelection = true

// Add popup menu to table for right-click on cells...
def popupMenuItems = {
	menuItem(text:"Select Rows",actionPerformed:{
		bRowSelection = true;
		thetab.columnSelectionAllowed = false
		thetab.rowSelectionAllowed = true})
	
	menuItem(text:"Select Columns",actionPerformed:{
		bRowSelection = false;
		thetab.columnSelectionAllowed = true
		thetab.rowSelectionAllowed = false})	

	separator()	
	menuItem(text:"Histogram of Selection",actionPerformed:{
		if (bRowSelection){
			selectedRows = thetab.getSelectedRows()
			histogramSelectedRows(thetab,selectedRows)
		}else{
			selectedCols = thetab.getSelectedColumns()
			histogramSelectedCols(thetab,selectedCols)
		}
	})
	
	menuItem(text:"Scatterplot Selection",actionPerformed:{
		if (bRowSelection){
			//err.println "scatterplot rows not yet implemented"
			selectedRows = thetab.getSelectedRows()
			scatterPlotSelectedRows(thetab,selectedRows)
		}else{
			selectedCols = thetab.getSelectedColumns()
			scatterPlotSelectedCols(thetab,selectedCols)
		}
	})
	
	menuItem(text:"Dual Histogram",actionPerformed:{
		if (bRowSelection){
			err.println "Dual histogram rows not yet implemented"
		}else{
			selectedCols = thetab.getSelectedColumns()
			dualHistogramSelectedCols(thetab,selectedCols)
		}
	})
	
	menuItem(text:"Two Sample Stats",actionPerformed:{
		if (bRowSelection){
			err.println "Paired Stats rows not yet implemented"
		}else{
			selectedCols = thetab.getSelectedColumns()
			statsCols(thetab,selectedCols)
		}
	})
}


thetab.setComponentPopupMenu(swing.popupMenu(popupMenuItems))

// Show everything...
frame.pack()
frame.show()

def histogramValues(name,values){
	def hist = hist(name,values)

	def stats = new DescriptiveStatistics();
	values.each{stats.addValue(it as double)}
	def mean = stats.getMean()
	def std = stats.getStandardDeviation();
	def median = stats.getPercentile(50);
	
	hist.getTitle().setFont(new Font("Tahoma", Font.BOLD, 12))	
	def summary = "Mean: ${mean.round(2)} Std: ${std.round(2)} Median: ${median.round(2)}"	
	def tt = new TextTitle(summary)
	tt.setFont(new Font("Tahoma", Font.PLAIN, 12))
	hist.addSubtitle(tt)			 	
	showTableChart(hist,"Distribution of $name")	
}


def histogramSelectedRows(thetab,selectedRows){	
	selectedRows.each{rowIdx->	
		// Get the name of the row...
		def rowName = thetab.getValueAt(rowIdx,0)
		def values = getColValues(thetab,rowIdx)
		if (values == null){
			System.err.println "Non-numeric.  Category row plot not yet supported."		
		}
		histogramValues(rowName,values)
	}
}

def histogramSelectedCols(thetab,selectedCols){			
	selectedCols.each{colIdx->
		// Get the name of the column...
		th = thetab.getTableHeader();  
		tcm = th.getColumnModel(); 
		tc = tcm.getColumn(colIdx)
		colName = tc.getHeaderValue()	
				
		rows = thetab.getRowCount();
		values = getRowValues(thetab,colIdx)		
		
		if (values.size() == 0) {
			// Must have been some non-numeric stuff in the column
			// So make a categorical plot instead. 
			def cm = getCategoryCounts(thetab,colIdx) 
			def hist = categoryHistogram("Category Frequency","Category","Frequency",cm)
			showTableChart(hist,"Distribution of $colName")	
		}else{	
			histogramValues(colName,values)
		}
	}
}

def scatterPlotValues(name0,name1,values0,values1){
	
	// Compute some statistics. 
	def corr = new SpearmansCorrelation().correlation(values0 as double[],values1 as double[]);
	
	scatter = xyplot("$name0 vs $name1 ",name0,name1,values0,values1)	
	scatter.getTitle().setFont(new Font("Tahoma", Font.BOLD, 12))		
	scatter.addSubtitle(new TextTitle("Spearman correlation: ${corr.round(3)}"))			 
					 
	showTableChart(scatter,"Scatterplot of $name0 vs $name1")	
}

def scatterPlotSelectedRows(thetab,selectedRows){			
	if(selectedRows.size() != 2){
		err.println "ERROR: Can only scatter plot exactly two rows."
		return;
	}	
	row0 = selectedRows[0]
	rowName0 = getRowName(thetab,row0)	
	row1 = selectedRows[1]
	rowName1 = getRowName(thetab,row1)
	(values0,values1) = getMatchedColValues(thetab,row0,row1)	
	if (values0.size() != values1.size()){
		err.println "ERROR: rows do not contain same number of values."
	}
	scatterPlotValues(rowName0,rowName1,values0,values1)	
}


def scatterPlotSelectedCols(thetab,selectedCols){			
	if(selectedCols.size() != 2){
		err.println "ERROR: Can only scatter plot exactly two columns."
		return;
	}	
	col0 = selectedCols[0]
	colName0 = getColName(thetab,col0)	
	col1 = selectedCols[1]
	colName1 = getColName(thetab,col1)
	
	(values0,values1) = getMatchedRowValues(thetab,col0,col1)
	if (values0.size() != values1.size()){
		err.println "ERROR: columns do not contain same number of values."
	}		
	scatterPlotValues(colName0,colName1,values0,values1)	
}

def dualHistogramSelectedCols(thetab,selectedCols){			
	if (selectedCols.size() != 2){
		System.err.println("Dual histogram only works on two columns.");
		return;
	}

	col0 = selectedCols[0]
	col1 = selectedCols[1]

	th = thetab.getTableHeader();  
	tcm = th.getColumnModel(); 
	tc0 = tcm.getColumn(col0)
	colName0 = tc0.getHeaderValue()	
	
	tc1 = tcm.getColumn(col1)
	colName1 = tc1.getHeaderValue()	
				
	values0 = getRowValues(thetab,col0)		
	values1 = getRowValues(thetab,col1)	
	
	// compute some statistics from these values
	statsStrs = getStatsStrs(values0,values1,colName0,colName1)
			
	if ((values0.size() == 0) || (values1.size()==0)){
		System.err.println "No dual histogram of categorical values. "
	}else{	
		dualhist = dualhist(title:"Distribution of $colName0 and $colName1)",
			series1:values0,
			series1name:colName0,
			series2:values1,
			series2name:colName1)
		showTableChartWithStats(dualhist,"Distribution of $colName0 and $colName1" as String,statsStrs)
	}	
}

// Compute a few stats
def getStatsStrs(values0,values1,colName0,colName1){
	def statsStrs = []
	def stats0 = new DescriptiveStatistics();
	values0.each{stats0.addValue(it as double)}
	def mean0 = stats0.getMean()
	def std0 = stats0.getStandardDeviation();
	def median0 = stats0.getPercentile(50);
	
	def stats1 = new DescriptiveStatistics();
	values1.each{stats1.addValue(it as double)}
	def mean1 = stats1.getMean()
	def std1 = stats1.getStandardDeviation();
	def median1 = stats1.getPercentile(50);
	
	DecimalFormat df = new DecimalFormat("#.###");
	df.setMaximumFractionDigits(5);
	desc = "<html><font color=green>$colName0</font> <b>mean:</b> ${df.format(mean0)} <font color=blue>$colName1</font> <b>mean:</b> ${df.format(mean1)}</html>"
	statsStrs<<desc
		
	mwu_p = new MannWhitneyUTest().mannWhitneyUTest(values0 as double[],values1 as double[])
	statsStrs << "Mann Whitney U p-value: ${df.format(mwu_p)}"
	
	//ks = new KolmogorovSmirnovTest().kolmogorovSmirnovTest(values0 as double[],values1 as double[])
	//statsStrs << "Kolmogorov Smirnov Test: $ks"
	
	return(statsStrs)
}

def statsCols(thetab,selectedCols){			
	if (selectedCols.size() != 2){
		System.err.println("Dual histogram only works on two columns.");
		return;
	}

	col0 = selectedCols[0]
	col1 = selectedCols[1]

	th = thetab.getTableHeader();  
	tcm = th.getColumnModel(); 
	tc0 = tcm.getColumn(col0)
	colName0 = tc0.getHeaderValue()	
	
	tc1 = tcm.getColumn(col1)
	colName1 = tc1.getHeaderValue()	
				
	values0 = getRowValues(thetab,col0)		
	values1 = getRowValues(thetab,col1)	
	
	def statsStrs = []
	def stats0 = new DescriptiveStatistics();
	values0.each{stats0.addValue(it as double)}
	def mean0 = stats0.getMean()
	def std0 = stats0.getStandardDeviation();
	def median0 = stats0.getPercentile(50);
	
	def stats1 = new DescriptiveStatistics();
	values1.each{stats1.addValue(it as double)}
	def mean1 = stats1.getMean()
	def std1 = stats1.getStandardDeviation();
	def median1 = stats1.getPercentile(50);
	
	def swing = new SwingBuilder()
	def frame = swing.frame(title:"Statistics for $colName0 and $colName1",pack:true,show:true) {
		borderLayout()
		panel(constraints: BL.SOUTH){
			vbox{
				//statsStrs.each{stat->
				//	textlabel = label(text: stat)
				//}
				textlabel = new JLabel("A <b>label</b> baby!");
				
				DecimalFormat df = new DecimalFormat("#.###");
				df.setMaximumFractionDigits(5);
				desc0 = "<html><font color=green>$colName0</font>   <b>mean:</b> ${df.format(mean0)}\t<b>median:</b> ${df.format(median0)}\t<b>std:</b>${df.format(std0)}</html>"
				textlabel = label(text: desc0)
					
				desc1 = "<html><font color=blue>$colName1</font>  <b>mean:</b> ${df.format(mean1)}\t<b>median:</b> ${df.format(median1)}\t<b>std:</b>${df.format(std1)}</html>"					
				textlabel = label(text: desc1)
		
				mwu_p = new MannWhitneyUTest().mannWhitneyUTest(values0 as double[],values1 as double[])
				textlabel = label(text: "<html><b>Mann Whitney U p-value:</b>\t${df.format(mwu_p)}")
	
				ks = new KolmogorovSmirnovTest().kolmogorovSmirnovTest(values0 as double[],values1 as double[])
				textlabel = label(text: "<html><b>Kolmogorov Smirnov Test:</b>\t${df.format(ks)}")
								
			}
		}
	}
	return(swing)	
}

/****
* Show the chart in a new window.  
*/ 
static showTableChartWithStats(chart,chartTitle,statsStr){
	def swing = new SwingBuilder()
	def frame = swing.frame(title:chartTitle,pack:true,show:true) {
		borderLayout()
		panel(new ChartPanel(chart),preferredSize: new java.awt.Dimension(500,300),mouseWheelEnabled:true)
		panel(constraints: BL.SOUTH){
			vbox{
				statsStr.each{stat->
					textlabel = label(text: stat)
				}
			}
		}
	}
	return(swing)		
}



def getColName(thetab,colIdx){
	th = thetab.getTableHeader();  
	tcm = th.getColumnModel(); 
	tc = tcm.getColumn(colIdx)
	colName = tc.getHeaderValue()	
	return(colName)
}

def getRowName(thetab,rowIdx){
	def rowName = thetab.getValueAt(rowIdx,0)
	return(rowName)
}


/*
* Some cols may be missing values in one or other selected row.  
* Omit those values form the list. 
*/ 
def getMatchedColValues(thetab,rowIdx1,rowIdx2){
	def values = []		
	def cols = thetab.getColumnCount();	
	def colIdxs = []
	
	for(int col = 0;col < cols;col++){
		o = thetab.getValueAt(rowIdx1,col)
		try{
			v = o as double
			if (!Double.isNaN(v)) {				
				// Record that this col has a valid value. 
				colIdxs.add(col)
				values.add(v) // just to pad out the list
			}
			//???values.add(v) // just to pad out the list
		}catch(Exception e){				
		}			
	}		
	// For second row, only consult colss that had values
	// in the first row...
	def values1 = []
	def values2 = []
	colIdxs.each{col->
		o = thetab.getValueAt(rowIdx2,col)
		try{
			v = o as double
			if (!Double.isNaN(v)) {
				v2 = values[col]				
				if (v2 != null){
					// Since it occurs in both rows, add them to the outputs...
					values1.add(values[col])
					values2.add(v)
				}
			}
		}catch(Exception e){				
		}	
	}	
	return([values1,values2])
}

/*
* Some rows may be missing values in one or other column.  
* Omit those values form the list. 
*/ 
def getMatchedRowValues(thetab,colIdx1,colIdx2){
	def values = []		
	def rows = thetab.getRowCount();	
	def rowIdxs = []
	
	for(int row = 0;row < rows;row++){
		o = thetab.getValueAt(row,colIdx1)
		try{
			v = o as double
			if (!Double.isNaN(v)) {				
				// Record that this row has a valid value. 
				rowIdxs.add(row)
				values.add(v) // just to pad out the list
			}
			// ???values.add(v) // just to pad out the list
		}catch(Exception e){				
		}			
	}		
	// For second column, only consult rows that had values
	// in the first column...
	def values1 = []
	def values2 = []
	rowIdxs.each{row->
		o = thetab.getValueAt(row,colIdx2)
		try{
			v = o as double
			if (!Double.isNaN(v)) {
				v2 = values[row]				
				if (v2 != null){
					// Since it occurs in both columns, add them to the outputs...
					values1.add(values[row])
					values2.add(v)
				}
			}
		}catch(Exception e){				
		}	
	}	
	System.err.println "values1: "+values1.size()
	System.err.println "values2: "+values2.size()
	return([values1,values2])
}

def getCategoryCounts(thetab,colIdx){
	def counts = new CounterMap()
	def rows = thetab.getRowCount();
	for(int row = 0;row < rows;row++){
		o = thetab.getValueAt(row,colIdx)		
		try{
			v = o as String
			counts.inc(v)
		}catch(Exception e){				
			// Don't do anything...
			err.println "WARNING: column ${getColName(thetab,colIdx)} can't convert to string."
		}			
	}
	counts = counts.sort{-it.value}
	return(counts)
}

def getColValues(thetab,rowIdx){
	def cols = thetab.getColumnCount();
	def values = []
	for(int col = 0;col < cols;col++){
		try{
			o = thetab.getValueAt(rowIdx,col)
			v = o as double
			if (Double.isNaN(o)) return;
			values.add(v)
		}catch(Exception e){
			// Don't do anything...
			//err.println "WARNING: row $rowName contains non-numeric values."
		}					
	}
}

def getRowValues(thetab,colIdx){
	def values = []		
	def rows = thetab.getRowCount();
	for(int row = 0;row < rows;row++){
		o = thetab.getValueAt(row,colIdx)
		try{
			v = o as double
			if (!Double.isNaN(v)) values.add(v)
		}catch(Exception e){				
			// Don't do anything...
		}			
	}
	return(values)
}

/****
* Show the chart in a new window.  
*/ 
static showTableChart(chart,chartTitle){
	def swing = new SwingBuilder()
	def frame = swing.frame(title:chartTitle,pack:true,show:true) {
		borderLayout()
		panel(new ChartPanel(chart),preferredSize: new java.awt.Dimension(500,300),mouseWheelEnabled:true)
	}
	return(swing)		
}



def printSelectedCols(thetab,selectedCols){
	model = thetab.getSelectionModel();
	colIdx = selectedCols[0] // OK, just print the first col...
	rows = thetab.getRowCount();
	for(int row = 0;row < rows;row++){
		o = thetab.getValueAt(row,colIdx)
		println o
	}
	println "\n\n"
}

def performSearch(){
	println "Search performed!"
}



/****************************************************
* Parse the command line options, checking validity, printing help if needed. 
*/ 
def ParseOptions(args){
	parser = new Parser(description: '''	
	Produces a spreedsheet-like display of a table of data (csv, tab).  Works like a regular
	spreadsheet, columns can be sorted, rearranged, etc.  Allows the display of tables of data much too 
	large for normal spreadsheets, though. Auto-detects tab or csv files.  Can overtly specify
	separator in case of other separator or mixed tab/, headings.   
	
	Control-click on table for a pop-up to toggle between selecting columns and selecting rows.  Pop-up
	also includes option to plot a histogram of the values in selected rows/columns.  Multiple columns
	can be selected to produce a scatter plot. 
	
	Written by: James Durbin (kdurbin@ucsc.edu)
	
	Use like:
	
	viewtab data.tab
	
	viewtab -s "\\t" data.tab

	''');

	try{ 
		parser.with{
			optional 's','separator',[description: 'Force separator to be this character.']
			flag 'q','qregex',[default:false,description: 'Use a regex to capture quoted comma lists as single field (slower).']
			flag 'n','nonsquare',[default:false,description: 'Read in a non-square file, filling in missing columns to make it square. (slower)']
	  		flag 'h','help',[default:false,description: 'Print script help.']
			remainder{			
				if(!it) throw new Exception("Must specify a file.");
				it
			}
		}
			
		options = parser.parse(args); 
		options.fileName = parser.remainder[0]
	}catch(Exception e){
		System.err << parser.usage;
		System.exit(1)
	}		
	return(options)
}

def createFilterListener(jtfFilter,rowSorter){
	jtfFilter.getDocument().addDocumentListener(new DocumentListener(){
		@Override
    	public void insertUpdate(DocumentEvent e) {        	
			String text = jtfFilter.getText();

        	if (text.trim().length() == 0) {
            	rowSorter.setRowFilter(null);
        	} else {
				def filterStr="(?i)" + text
            	rowSorter.setRowFilter(RowFilter.regexFilter(filterStr));
        	}
    	}

    	@Override
    	public void removeUpdate(DocumentEvent e) {
        	String text = jtfFilter.getText();
        	if (text.trim().length() == 0) {
            	rowSorter.setRowFilter(null);
        	} else {
            	rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
        	}
    	}
		
    	@Override
    	public void changedUpdate(DocumentEvent e) {
        	throw new UnsupportedOperationException("DocumentEvent type not supported yet."); 
    	}
	});
}



/**

17206x1037 (17,842,622) 
326MB file (many digits per souble)
24s

26895 x 466 (12,533,070)
10-15 seconds. 

20530 x 823 (16,896,190)
viewtab:
19s
14s
20s

vt:
14s
18s
19s
18s

Numbers:
143s

*/