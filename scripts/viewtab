#!/usr/bin/env groovy 

import groovy.swing.SwingBuilder
import javax.swing.JTable
import javax.swing.*
import javax.swing.table.AbstractTableModel;
import durbin.util.*

err = System.err

// set the application name for mac os
// Investigate making more Mac-like, e.g. http://www.curious-creature.org/2007/07/26/improving-groovys-console-gui/
//System.setProperty("apple.laf.useScreenMenuBar", "true")
//System.setProperty("com.apple.mrj.application.apple.menu.about.name", "GroovyConsole")
//UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName())
//ConsoleMacOsSupport.handleMacOs(this.&exit, this.&showAbout)

options = ParseOptions(args)

// Determine separator to use...
if (options.separator) sep = options.separator
else sep = FileUtils.determineSeparator(options.fileName)

// Read the data in as a Table...
dt = new Table(options.fileName,sep,bFirstColInTable=true)

// Use that Table to back a JTable instance..
err.print "Creating gui table..."
dtm = new TableModel(dt)

swing = new SwingBuilder()
def mytable
frame = swing.frame(title:options.fileName,defaultCloseOperation:JFrame.EXIT_ON_CLOSE){
	
	// add a simple menu bar
	//menuBar() {
	//	menu(text: "File", mnemonic: 'F') {
	//		menuItem(text: "Exit", mnemonic: 'X', actionPerformed: { System.exit(0) })
	//	}
	//}
	
  scrollpane = scrollPane {						
		thetab = table(autoResizeMode:JTable.AUTO_RESIZE_OFF, autoCreateRowSorter:true){
			tableModel(dtm)	
		}							
  }
}
err.println "done."
frame.pack()
frame.show()

/****************************************************
* Parse the command line options, checking validity, printing help if needed. 
*/ 
def ParseOptions(args){
	parser = new Parser(description: '''	
	Produces a spreedsheet-like display of a table of data (csv, tab).  Works like a regular
	spreadsheet, columns can be sorted, etc.  Allows the display of tables of data much too 
	large for normal spreadsheets, though. Auto-detects tab or csv files.  Can overtly specify
	separator in case of other separator or mixed tab/, headings. 
	
	Written by: James Durbin (kdurbin@ucsc.edu)
	
	Use like:
	
	viewtab data.tab
	
	viewtab -s "\t" data.tab

	''');

	parser.with{
		optional 's','separator',[description: 'Force separator to be this character.']
	  flag 'h','help',[default:false,description: 'Print script help.']
		remainder{if(!it) throw new IllegalArgumentException("Must specify a file.");it}
	}
	try{ 
		options = parser.parse(args); 
		options.fileName = parser.remainder[0]
	}catch(Exception e){System.err << parser.usage;System.exit(1)}		
	return(options)
}

//*************************************
// Supporting classes
//*************************************
class TableModel extends AbstractTableModel{		
	Table dt;
	
	TableModel(Table table){dt = table;}

	public String getColumnName(int col) {return(dt.colNames[col]);}	
	public String getRowName(int row){return(dt.rowNames[row]);}	
	public int getRowCount() { return(dt.rows())}
	public int getColumnCount() { return(dt.cols())}
	public String getValueAt(int row, int col) {return(dt.get(row,col))}	
	public Class getColumnClass(int c) {return(dt.get(0,c).getClass())}  	
	public boolean isCellEditable(int row, int col){return false;}	
	public void setValueAt(Object value, int row, int col) {}
}