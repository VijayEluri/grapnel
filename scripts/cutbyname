#!/usr/bin/env groovy

import grapnel.util.*

err = System.err

options = ParseOptions(args)

// Determine separator to use...
if (options.separator) sep = options.separator
else sep = FileUtils.determineSeparator(options.fileName)

if (options.qregex){
	sep = /,(?=([^\"]|\"[^\"]*\")*$)/
}

new File(options.fileName).withReader{r->
	headerStr = r.readLine()
	headings = headerStr.split(sep)
	name2IdxMap = [:]
	headings.eachWithIndex{h,i->name2IdxMap[h] = i}
	
	headingElements = []
	indices = []
	options.cutNames.each{cutName->
		cutIdx = name2IdxMap[cutName]
		indices<<cutIdx
		headingElements << headings[cutIdx]
	}
	println headingElements.join(sep)
					
	r.splitEachLine(sep){fields->
		allfields = []
		indices.each{i->
			allfields<<fields[i]
		}
		println allfields.join(sep)
	}	
}


/****************************************************
* Parse the command line options, checking validity, printing help if needed. 
*/ 
def ParseOptions(args){
	parser = new Parser(description: '''	
	cutbyname fileName columnName {columnName2,columnName3...}
	
	Cuts one or more columns out of a table file.  For more complex queries see csvsql.
	
	e.g. 
	
	cutbyname -d BRCA.clin days_to_death.
	
	cutbyname -d BRCA.clin patient days_to_death

	''');

	try{ 
		parser.with{
			required 'd','fileName',[description:'Data table.']
			optional 's','separator',[description: 'Force separator to be this character.']
			flag 'q','qregex',[default:false,description: 'Use regex to capture quoted comma lists as single field in csv.']
	  		flag 'h','help',[default:false,description: 'Print script help.']
			remainder{			
				if(!it) throw new Exception("Must specify at least one column");
				it
			}
		}
	
		options = parser.parse(args); 
		options.cutNames = parser.remainder
	}catch(Exception e){
		err << parser.usage;
		System.exit(1)
	}		
	return(options)
}
